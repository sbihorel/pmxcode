[{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"reference-model","dir":"Articles","previous_headings":"","what":"REFERENCE MODEL","title":"Covariate module","text":"panel vertically divided left right area.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"left-area","dir":"Articles","previous_headings":"REFERENCE MODEL","what":"Left area","title":"Covariate module","text":"left side panel, must upload reference model intended step step forward covariate selection backward elimination. done using SELECT REFERENCE MODEL button. Valid control stream files use .ctl .mod extension. Files using .ctl extension assumed follow standard style, file using .mod extension assumed follow PsN style (see Model library article details topic). uploaded, model code shown text editing field allows make desired modification. content display area automatically parsed pmxcode various diagnostic messages may displayed colored boxes indicating whether issues identified. required selected model complies NONMEM coding commenting conventions implemented pmxcode. Therefore, typically expected selected model created pmxcode derived model created pmxcode.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"right-area","dir":"Articles","previous_headings":"REFERENCE MODEL","what":"Right area","title":"Covariate module","text":"facilitate implementation requirements, step 1 forward covariate selection, can use CONVERT button shown right side panel automatically modify code uploaded reference model. modified version shown second text editing field allows make desired modification (recommended). modified version used reference creation univariate models instead uploaded code.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"conventions","dir":"Articles","previous_headings":"REFERENCE MODEL","what":"Conventions","title":"Covariate module","text":"Name header reference control stream must contain comment providing file path name matches selected reference model. comment must start ;; Name: illustrated . Parameters header reference control stream must contain comment providing list description model parameters. Note Model library module automatically generates comment control streams produces. expected format parameter description illustrated example . comment must start ;; Parameters: ;; Parameters (mu):. “(mu)” indicates parameters associated variability MU-referenced. “(mu)” included prior colon, assumed MU-referencing used. Using MU-referencing prevents parameter-covariate relationships tested (see COVARIATE EFFECTS). colon, information model parameter separated commas. parameter name provided first, possibly followed information scale variability parentheses separated “|”. Valid values scale “log” “logit” logarithmic logit scales; absence information indicates use linear scale. Valid values variability “add”, “exp”, “logit” additive, exponential, logit variability models; absence information indicates lack variability. example , CL assumed parameterized linear scale associated exponential variability; VC assumed parameterized log scale associated exponential variability; Q assumed parameterized log scale without variability; VP assumed parameterized linear scale without variability; IMAX assumed parameterized logit scale associated logit variability model; etc… Time-varying covariates Caution must exercised testing time-varying covariate parameters MU-referenced, especially expectation-maximization algorithm (eg SAEM IMP) used model optimization. per NONMEM’s user guide, MU variables must time-invariant within occasion (completely time-invariant occasions defined). covariate time-varying, effect must applied outside linear MU + ETA relationship. indicate least one covariate dataset time-varying, control stream header must include following comment “; Time-varying covariates”. affect possible choice covariate effect tested MU-referencing used. TVX / LX / X parameter X listed parameter description listed mentioned (generally parameter included model), typical value parameter must defined variable TVX, individual value parameter must defined variable X. parameter associated logit variability model, logit transform typical value parameter must defined variable LX. instance,","code":";; Name: /home/joesmith/pmx/projectA/models/run176.mod ;;    Parameters (mu): CL (|exp), VC (log|exp), Q (log|), VP, KA (|add), F1 (|logit), BASE (|add), KOUT (|add), IMAX (logit|logit), IC50 (|exp) TVCL = THETA(1)   CL = TVCL * EXP(ETA(1))      TVF1 = THETA(2)   LF1 = LOG( TVF1 / (1-TVF1) )   F1 = 1 / (1 + EXP(-(LF1 + ETA(2) ) ) )"},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"covariate-effects","dir":"Articles","previous_headings":"","what":"COVARIATE EFFECTS","title":"Covariate module","text":"panel, can define parameter-covariate relationships univariate models must created.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"possible-relationships","dir":"Articles","previous_headings":"COVARIATE EFFECTS","what":"Possible relationships","title":"Covariate module","text":"parameter-covariate relationships can tested continuous categorical covariates listed (actual code illustrated Code implementation): Continuous: linear, power, exponential Categorical: additive, proportional, direct proportional, exponential list relationships actually testable depends scale parameter, associated variability model, use MU-referencing, whether time-varying covariates used. Error messages displayed interface invalid relationship selected. Scale Linear Log Logit Linear Log Logit Variability * Additive Exponential Logit * Additive Exponential Logit * Additive Exponential Logit * Additive Exponential Logit * Additive Exponential Logit * Additive Exponential Logit  MU-referencing orMU-referencing time-varying covariates MU-referencing time-varying covariates Linear Y Y Y Y - - - - Y - - Y Y Y Y Y - - - - Y - - Y Power Y Y Y Y Y Y Y - Y - - Y Y - Y - Y - Y - Y - - - Exponential Y Y Y Y - - - - Y - - Y Y - Y - - - - - Y - - - Additive Y Y Y Y - - - - Y - - Y Y Y Y Y - - - - Y - - Y Proportional Y Y Y Y - - - - Y - - Y Y - Y - - - - - Y - - - Direct proportional Y Y Y Y Y Y Y - Y - - Y Y - Y - Y - Y - Y - - Y * absence variability, parameters never MU-referenced code.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"inferface","dir":"Articles","previous_headings":"COVARIATE EFFECTS","what":"Inferface","title":"Covariate module","text":"Parameter/covariate relationships defined step forward selection backward elimination stages using table provided COVARIATE EFFECTS panel. Since NONMEM execution can take time, covariate effect definitions can saved (using  button) .csv file later uploaded (using  button) modifications. interface table includes multiple columns: Parameter covariate must entered single variables eponymous columns (using alphanumeric characters ); Type column defines whether covariate discrete continuous variables; Functional form column defines mathematical form relationship: “Linear”, “Power”, “Exponential” continuous variables “Additive”, “Proportional”, “Direct proportional” discrete variables; centering value covariate effect must entered Center value continuous covariate; initial estimate covariate effect must entered eponymous column; discrete covariates > 2 categories, non-reference categories associated specific dichotomous flag initial estimate. flags must entered Dichotomous flags discrete covariate column separated colons without spaces estimates must entered similar fashion (corresponding order) Initial estimate column. instance, define effects renal function categories, one can enter “RFMILD:RFMOD:RFSEV” flag column “0.1:0.2:0.3” estimate column. Action column defines action taken based upon information entered row: “Create” create control stream, “create” perform action, “Select” indicate covariate effect selected particular forward selection step, “Remove” indicate covariate effect removed particular backward elimination step. Use   buttons add delete rows interface table. Table content can also copied () pasted (). can also click  create new step duplicating content current step (selected covariate effect filtered based upon Action column selection). step 1 backward elimination, can also click  extract list parameter/covariate relationships previously included reference model. Note : variables (parameters, covariates, flags) must defined NONMEM control stream $INPUT, $PRED, $PK block. covariates flags need defined control stream, must done prior ;– COVARIATE EFFECT START. downloaded .csv files contain following data column: Stage, Step, Parameter, Covariate, Type, Function, Center, Flags, Initial, Action.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"univariate-models","dir":"Articles","previous_headings":"","what":"UNIVARIATE MODELS","title":"Covariate module","text":"Univariate models automatically created clicking CREATE button selecting stage analysis (“Forward selection” “Backward elimination”) step analysis (1, 2, 3, etc.). Optionally, can define folder univariate model files saved using SELECT MODEL DIRECTORY button. download save files location using EXTRACT button. button shows creation univariate runs. Note , uploaded reference model uses PsN convention, univariate model files named runX.mod, X 3 4-digit number starting value set field entitled “Run nº start ”. uploaded reference model uses standard NONMEM convention user-defined named, univariate model files use different naming convention: <prefix>-<parameter>-<covariate>-<function>-<number>.ctl <prefix> value set Filename prefix field, <parameter> <covariate> variables involved relationship, <function> either “lin”, “pow”, “exp”, “add”, “prop” “dirprop” based upon selected functional form, <number> 2-digit number. creation univariate model code, can see content file LIST UNIVARIATE MODELS tab look checks performs across univariate models CHECKS tab.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"code-implementation","dir":"Articles","previous_headings":"","what":"Code implementation","title":"Covariate module","text":"section describes principles applied pmxcode generate NONMEM code univariate models illustrates principles prototypical code examples.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"definition-of-acov_x-and-mcov_x","dir":"Articles","previous_headings":"Code implementation","what":"Definition of ACOV_X and MCOV_X","title":"Covariate module","text":"univariate model testing effect covariate parameter X, pmxcode checks reference model already defines variables ACOV_X MCOV_X, , case, pmxcode inserts lines code defines variables. ACOV_X intended combines additive covariate effects applied X MCOV_X combines multiplicative effects applied X. Depending use MU-referencing time-varying covariates, ACOV_X MCOV_X applied TVX LX. Prior inclusion covariate effect, ACOV_X MCOV_X defined follows:","code":"ACOV_X = 0 MCOV_X = 1"},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"definition-of-covi","dir":"Articles","previous_headings":"Code implementation","what":"Definition of COVi","title":"Covariate module","text":"univariate model created step (= 1 n) forward selection, pmxcode inserts line code defining COVi variable (COV1, COV2, COV3, etc…) defining covariate effect tested. parameterization possible relationships illustrated continuous covariate CONT centered value 25 discrete variable CAT either equal 1, 2 3. discrete variables, binary variables must defined value CAT reference value. examples , 1 assume reference, CAT2 binary variable set 1 CAT=2 0 otherwise, CAT3 binary variable set 1 CAT=3 0 otherwise. CAT2 CAT3 must either dataset defined control stream. prototypical code provided assumed creation COV1 step 1 forward selection. later steps, pmxcode applies principles creation COV2 step 2, COV3 step 3, etc. Scale Covariate Function Code Applies Linear/Logit Continuous Linear COV1 = THETA(2) * (CONT-25) ACOV_X Continuous Power COV1 = (CONT/25)**THETA(2) MCOV_X Continuous Exponential COV1 = EXP(THETA(2)*(CONT-25)) MCOV_X Discrete Additive COV1 = CAT2 * THETA(2) + CAT3 * THETA(3) ACOV_X Discrete Proportional COV1 = 1 + CAT2*THETA(2) + CAT3*THETA(3) MCOV_X Discrete Directproportional COV1 = THETA(2)**CAT2 * THETA(3)**CAT3 MCOV_X Discrete Exponential COV1 = EXP(THETA(2)*CAT2 + THETA(3)*CAT3) MCOV_X Log Continuous Power COV1 = LOG(CONT/25)*THETA(2) ACOV_X Discrete Directproportional COV1 = THETA(2)*CAT2 + THETA(3)*CAT3 ACOV_X later steps forward selection, multiple covariates affect parameter X. cases, additive covariate effects (eg COV1, COV3, COV6) combined ACOV_X multiplicative covariate effects (eg COV2, COV4, COV5) combined MCOV_X follows:","code":"ACOV_X = COV1 + COV3 + COV6 MCOV_X = COV2 * COV4 * COV5"},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"assignment-of-acov_x-and-mcov_x","dir":"Articles","previous_headings":"Code implementation","what":"Assignment of ACOV_X and MCOV_X","title":"Covariate module","text":"ACOV_X MCOV_X applied either TVX LX variables depending scale parameter X, variability associated parameter X, use MU-referencing, use time-varying covariates. section describes code implemented various situations. minX maxX minimum maximum values parameter X defined logit scale associated logit variability model","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"no-mu-referencing","dir":"Articles","previous_headings":"Code implementation > Assignment of ACOV_X and MCOV_X","what":"No MU-referencing","title":"Covariate module","text":"Scale Variability Code Linear None LX = ACOV_X + MCOV_X * THETA(1)TVX = LXX = TVX Additive LX = ACOV_X + MCOV_X * THETA(1)TVX = LXX = TVX + ETA(1) Exponential LX = ACOV_X + MCOV_X * THETA(1)TVX = LXX = TVX * EXP( ETA(1) ) Logit LX = ACOV_X + MCOV_X * LOG((THETA(1) - minX)/(maxX - minX)/(1 – (THETA(1) - minX)/(maxX – minX) ) )TVX = 1 / (1 + EXP(-LX) )X = minX + (maxX – minX) / ( 1 + EXP( - (LX + ETA(1) ) ) ) Log None LX = ACOV_X + THETA(1)TVX = EXP(LX)X = TVX Additive LX = ACOV_X + THETA(1)TVX = EXP(LX)X = TVX + ETA(1) Exponential LX = ACOV_X + THETA(1)TVX = EXP(LX)X = TVX * EXP( ETA(1) ) Logit N/Logit None LX = ACOV_X + MCOV_X * THETA(1) TVX = minX + (maxX – minX) / (1 + EXP(-LX) )X = TVX Additive N/Exponential N/Logit LX = ACOV_X + MCOV_X * THETA(1)TVX = minX + (maxX – minX) / (1 + EXP(-LX) )X = minX + (maxX – minX) / (1 + EXP(- (LX + ETA(1) ) ) )","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"mu-referencing-without-time-varying-covariates","dir":"Articles","previous_headings":"Code implementation > Assignment of ACOV_X and MCOV_X","what":"MU-referencing without time-varying covariates","title":"Covariate module","text":"Scale Variability Code Linear None LX = ACOV_X + MCOV_X * THETA(1)TVX = LXX = TVX Additive LX = ACOV_X + MCOV_X * THETA(1)TVX = LXMU_1 = LXX = MU_1 + ETA(1) Exponential LX = ACOV_X + MCOV_X * ( THETA(1) )TVX = LXMU_1 = LOG(LX)X = EXP( MU_1 + ETA(1) ) Logit LX = ACOV_X + MCOV_X * LOG((THETA(1) - minX)/(maxX - minX)/(1 – (THETA(1) - minX)/(maxX – minX) ) )TVX = 1 / (1 + EXP(-LX) )MU_1 = LXX = minX + (maxX – minX) / ( 1 + EXP( - (MU_1 + ETA(1) ) ) ) Log None LX = ACOV_X + THETA(1)TVX = EXP(LX)X = TVX Additive LX = ACOV_X + THETA(1)TVX = EXP(LX)MU_1 = TVXX = MU_1 + ETA(1) Exponential LX = ACOV_X + THETA(1)TVX = EXP(LX)MU_1 = LXX = EXP( MU_1 + ETA(1) ) Logit N/Logit None LX = ACOV_X + MCOV_X * THETA(1)TVX = minX + (maxX – minX) / (1 + EXP(-LX) )X = TVX Additive N/Exponential N/Logit LX = ACOV_X + MCOV_X * THETA(1)TVX = minX + (maxX – minX) / (1 + EXP(-LX) )MU_1 = LXX = minX + (maxX – minX) / (1 + EXP(- (MU_1 + ETA(1) ) ) )","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/covariates.html","id":"mu-referencing-without-time-varying-covariates-1","dir":"Articles","previous_headings":"Code implementation > Assignment of ACOV_X and MCOV_X","what":"MU-referencing without time-varying covariates","title":"Covariate module","text":"Scale Variability Code Linear None LX = ACOV_X + MCOV_X * THETA(1)TVX = LXX = TVX Additive LX = THETA(1)TVX = ACOV_X + LXMU_1 = LXX = ACOV_X + ( MU_1 + ETA(1) ) Exponential LX = THETA(1)TVX = ACOV_X + MCOV_X * LXMU_1 = LOG(LX)X = (ACOV_X/LX + MCOV_X) * EXP( MU_1 + ETA(1) ) Logit LX = LOG((THETA(1) - minX)/(maxX - minX)/(1 – (THETA(1) - minX)/(maxX – minX) ) )TVX = minX + (maxX – minX) / (1 + EXP(- (ACOV_X+LX) ) )MU_1 = LXX = minX + (maxX – minX) / ( 1 + EXP( - (ACOV_X + (MU_1 + ETA(1) ) ) ) ) Log None LX = ACOV_X + THETA(1)TVX = EXP(LX)X = TVX Additive N/Exponential LX = THETA(1)TVX = EXP( ACOV_X + ( LX) )MU_1 = LXX = EXP( ACOV_X) * ( EXP( MU_1 + ETA(1) ) ) Logit N/Logit None LX = ACOV_X + MCOV_X * THETA(1)TVX = minX + (maxX – minX) / (1 + EXP(-LX) )X = TVX Additive N/Exponential N/Logit LX = THETA(1)TVX = minX + (maxX – minX) / (1 + EXP(- (ACOV_X + LX) ) )MU_1 = LXX = minX + (maxX – minX) / ( 1 + EXP( - (ACOV_X + (MU_1 + ETA(1) ) ) ) )","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"platform","dir":"Articles","previous_headings":"","what":"PLATFORM","title":"Model library","text":"menu, can select whether model intended run using NONMEM mrgsolve. optional text field allows define version NONMEM mrgsolve used. information included comment model file header. select NONMEM, can choose coding style: model file name based upon combination characters set “mymodel.ctl” default. one $TABLE statement included, combining output variables. simple header created displaying file path/name, time stamp, author, model purpose. model file uses *.mod extension model file name expected following “run#” standard (# one digits) set run001.mod default four $TABLE statements included, generating sdtab#, patab#, cotab#, catab# files based upon Xpose Xpose4 file convention. header includes file path/name, time stamp, author, model purpose format compliant Perl-speaks-NONMEM runrecord command.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"files","dir":"Articles","previous_headings":"","what":"FILES","title":"Model library","text":"menu, can select directory model file saved using SELECT MODEL DIRECTORY button. can also change base name model file dedicated text field. file extension can either *.ctl (standard style ) *.mod. file path name included file header defines name file can downloaded toolbar model editing area. menu, can also select data file using SELECT DATA FILE button. selected platform NONMEM, path name selected file used define $DATA statement. Additionally, file selected, pmxcode attempt process file displays summary data successful error message . selected platform NONMEM, list variables extracted data file displayed $INPUT statement","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"mapping","dir":"Articles","previous_headings":"","what":"MAPPING","title":"Model library","text":"selected platform NONMEM data file selected FILES menu, pmxcode attempts map variables extracted file data items expected understood NONMEM. editable table, can manually select change selection variable Using drop-list following data items: Subject identifier variable Independent variable Dependent variable Compartment variable Endpoint identifier variable Time dose variable Amount variable Rate variable BLQ variable Using dedicated multi-selection text field, can also select variables dropped $INPUT statements. Two additional multi-selection text fields enables identification continuous categorical variables, automatically include appropriate $TABLE statements.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"structure","dir":"Articles","previous_headings":"","what":"STRUCTURE","title":"Model library","text":"menu, can select structural components model. interface content presented NONMEM-centric perspective choices generally applicable NONMEM mrgsolve platforms. interface includes 3 panels. top panels relates pharmacokinetic (PK) models. middle panel relates pharmacodynamic (PD) models. bottom panel relates coding options mostly relevant NONMEM models. default model 1-compartment PK model linear first-order absorption linear elimination. fields displayed top middle panels list options offered change dynamic manner. number possible combinations large exhaustively presented , available choices obvious users familiar pharmacometric topics. main options delineated .","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"pharmacokinetic-models","dir":"Articles","previous_headings":"STRUCTURE","what":"Pharmacokinetic models","title":"Model library","text":"library pre-defined pharmaocokinetic models available field directly panel title set “Defined subroutines”, reference NONMEM $SUBROUTINE statements. panel fields enables selection number disposition compartment, type intra- /extra-vascular dosing, type elimination. needs write code benefiting functionality provided pmxcode, can change field selection : Defined first-order rates: applicable linear models defined first-order rate constants. selection can useful parent-metabolite models. Defined ODEs: applicable non-linear models requiring use ordinary differential equations. Note standard non-linear models models saturable elimination target-mediated drug disposition available code library defined subroutines. Defined explicit solutions: applicable cases can define PK model closed form solution. 3 cases, define parameters model PARAMETERS menu write code text editing area write. done went menus avoid update text editing area , thus, loss written code.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"pharmacodynamic-models","dir":"Articles","previous_headings":"STRUCTURE","what":"Pharmacodynamic models","title":"Model library","text":"default model include PD model. can change selection field directly middle panel title include PD component model. available selection differ whether model also include PK component, illustrated .  Pharmacokinetic model None Defined bysubroutines Defined byfirst-order rates Defined byODEs Defined byexplicit solutions Pharmacodynamic model None - Y Y Y - Exposure-Response Y - - - Y Direct effect - Y Y Y - Biophase / Link - Y Y Y - Indirect response - Y Y Y - Defined ODEs Y Y Y Y - Defined explicit solutions Y - - - Y Logistic regression Y - - - - Ordered categorical model Y - - - - library pre-defined inhibitory stimulatory models available exposure-Response models, direct effects models, biophase / link models, indirect response models, logistic regression, ordered categorical model. can select among different functional forms parameterizations also defined exposure variable PK model state drives PD effects.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"parameters","dir":"Articles","previous_headings":"","what":"PARAMETERS","title":"Model library","text":"must visit make selections STRUCTURE menu PARAMETERS menu populates. Note typically visit PARAMETERS COVARIANCE menus code generated model text editing area.  main element PARAMETERS interface table parameters can define parameter name, label, unit, minimum value, initial value, maximum value, scale, whether parameter fixed (NONMEM models ). model selected STRUCTURE menu part code library PK /PD models, table pre-populated expected parameters model. Alternatively, can add parameters table using Additional parameters fields shown table. Default values minimum, initial, maximum values parameters used pmxcode priori knowledge particular use case. likely change default values fit needs. values must provided linear scale even parameters defined log logit scales. Warning messages displayed table automatic checks table content triggered. NONMEM models, can use “MU referencing” toggle button top left interface indicate model parameters associated interindividual variability MU-referenced . Please refer NONMEM user’s guide information MU-referencing. mrgsolve models, can switch “Include POSTHOC estimates” toggle button Yes case model used simulations based upon data-provided post hoc estimates parameters. Similarly, can switch “Import NONMEM estimates” toggle button Yes intent extract parameter estimates NONMEM estimation run. cases, [ PARAM ], [ OMEGA ], [ SIGMA ] blocks included model code.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"covariance","dir":"Articles","previous_headings":"","what":"COVARIANCE","title":"Model library","text":"must visit make selections STRUCTURE PARAMETERS menus COVARIANCE menu populates. interface displays VARIANCE table COVARIANCE table. “Variance” table enables select variability model associated parameter model. possible selection : None: indicates variability must associated parameter, Additive: indicates individual values parameter must normally distributed, Exponential: indicates individual values parameter must log-normally distributed, Logit: indicates individual values parameter must normally distributed logit scale. “Covariance” table present editable triangular covariance matrix. Rows columns associated parameter automatically enabled disabled variability associated parameter . can edit values diagonal -diagonal elements needed. pmxcode automatically processes content matrix generate one OMEGA blocks NONMEM mrgsolve model code. Warning messages displayed table automatic checks “Covariance” table content triggered.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"rv","dir":"Articles","previous_headings":"","what":"RV","title":"Model library","text":"must visit make selections STRUCTURE menu RV menu populates. can select one residual variability model PK /PD endpoint model. possible selections : None: indicates variability associated endpoint (mostly useful PKD/PD model PD endpoint modeled) Additive: indicates amount residual variability associated model predictions constant Constant CV: indicates amount residual variability associated model predictions proportional model prediction Additive + Constant CV: indicates amount residual variability associated model predictions proportional model predictions plus constant Logarithmic: indicates amount residual variability associated log-transformed model predictions constant can define variance residual variability parameters “Residual variability parameters” table. NONMEM models, can request implementation Beal’s M3 method (DOI: 10.1023/:1012299115260) switching toggle button Yes bottom right side interface.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"tasks","dir":"Articles","previous_headings":"","what":"TASKS","title":"Model library","text":"menu relevant NONMEM models. menu, can define whether NONMEM perform estimation steps, covariance step, /simulation step. table bottom interface allows selection options one estimation steps.","code":""},{"path":"https://sbihorel.github.io/pmxcode/articles/library.html","id":"scaling","dir":"Articles","previous_headings":"","what":"SCALING","title":"Model library","text":"goal SCALING menu implement NONMEM mrgsolve code proper scaling factor ensure units dose, volume, measured PK endpoint internally consistent, including taking account differences mass molar units dose measured endpoints. Dedicated fields displayed define units dose, volume, concentration, necessary molecular mass.","code":""},{"path":"https://sbihorel.github.io/pmxcode/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastien Bihorel. Maintainer, author.","code":""},{"path":"https://sbihorel.github.io/pmxcode/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bihorel S (2025). pmxcode: Create Pharmacometric Models. R package version 0.3.0, https://github.com/sbihorel/pmxcode.","code":"@Manual{,   title = {pmxcode: Create Pharmacometric Models},   author = {Sebastien Bihorel},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/sbihorel/pmxcode}, }"},{"path":"https://sbihorel.github.io/pmxcode/index.html","id":"pmxcode-","dir":"","previous_headings":"","what":"Create Pharmacometric Models","title":"Create Pharmacometric Models","text":"pmxcode Shiny app provides user interface create modify pharmacometric models various modeling simulation software platforms (currently, NONMEM mrgsolve).","code":""},{"path":"https://sbihorel.github.io/pmxcode/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Pharmacometric Models","text":"can install development version pmxcode like :","code":"# Install the lastest release from the CRAN install.packages('pmxcode')  # Or install the development version from GitHub # install.packages('devtools') devtools::install_github('sbihorel/pmxcode')"},{"path":"https://sbihorel.github.io/pmxcode/index.html","id":"starting-the-shiny-app","dir":"","previous_headings":"","what":"Starting the Shiny app","title":"Create Pharmacometric Models","text":"can start Shiny application using run_app function.","code":"pmxcode::run_app()"},{"path":"https://sbihorel.github.io/pmxcode/index.html","id":"main-functionality","dir":"","previous_headings":"","what":"Main functionality","title":"Create Pharmacometric Models","text":"pmxcode Shiny app provides 2 modules functionality: code library large variety pharmacokinetic /pharmacodynamic models interface bulk creation NONMEM control streams univariate covariate testing forward selection backward elimination module accessible toolbar top app described dedicated article.","code":""},{"path":"https://sbihorel.github.io/pmxcode/reference/pmxcode-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pmxcode: Create Pharmacometric Models — pmxcode-package","title":"pmxcode: Create Pharmacometric Models — pmxcode-package","text":"Provides user interface create modify pharmacometric models various modeling simulation software platforms.","code":""},{"path":[]},{"path":"https://sbihorel.github.io/pmxcode/reference/pmxcode-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pmxcode: Create Pharmacometric Models — pmxcode-package","text":"Maintainer: Sebastien Bihorel sb.pmlab@gmail.com","code":""},{"path":"https://sbihorel.github.io/pmxcode/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://sbihorel.github.io/pmxcode/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(launch.browser = TRUE),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://sbihorel.github.io/pmxcode/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://sbihorel.github.io/pmxcode/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the Shiny Application — run_app","text":"Starts PMXcode Shiny application","code":""},{"path":"https://sbihorel.github.io/pmxcode/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the Shiny Application — run_app","text":"","code":"if (FALSE) { # \\dontrun{ if( interactive() ){   pmxcode::run_app() } } # }"},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-022","dir":"Changelog","previous_headings":"","what":"pmxcode 0.2.2","title":"pmxcode 0.2.2","text":"Add feature fix variability estimates Fix issue parameterization log logit scale Clean documentation","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-021","dir":"Changelog","previous_headings":"","what":"pmxcode 0.2.1","title":"pmxcode 0.2.1","text":"Change parameterization logit model consistency across scales / mu transformation Add list parameters headers Fix description issue headers biophase model","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-020","dir":"Changelog","previous_headings":"","what":"pmxcode 0.2.0","title":"pmxcode 0.2.0","text":"CRAN release: 2025-03-01 Allow users define parameter linear, log, logit scale mrgsolve models, allow users switch random variability posthoc estimates variability UI refactoring using bslib Fixes typos M3 method code","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-014","dir":"Changelog","previous_headings":"","what":"pmxcode 0.1.4","title":"pmxcode 0.1.4","text":"CRAN release: 2024-10-19 Bug fixes M3 method coding app crash certain model combination.","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-013","dir":"Changelog","previous_headings":"","what":"pmxcode 0.1.3","title":"pmxcode 0.1.3","text":"CRAN release: 2024-06-13 Bug fixes target-mediated elimination","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-012","dir":"Changelog","previous_headings":"","what":"pmxcode 0.1.2","title":"pmxcode 0.1.2","text":"CRAN release: 2024-02-18 Bug fixes logit variability model Update UI bslib","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-011","dir":"Changelog","previous_headings":"","what":"pmxcode 0.1.1","title":"pmxcode 0.1.1","text":"CRAN release: 2023-05-19 Bug fixes transit compartment absorption model code NONMEM Bug fixes default NONMEM $TABLE variables","code":""},{"path":"https://sbihorel.github.io/pmxcode/news/index.html","id":"pmxcode-01","dir":"Changelog","previous_headings":"","what":"pmxcode 0.1","title":"pmxcode 0.1","text":"CRAN release: 2023-04-13 First release supporting creation new models NONMEM mrgsolve","code":""}]
